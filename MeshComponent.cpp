#include "MeshComponent.h"

#include <SimpleMath.h>

#include "Game.h"
#include "CameraComponent.h"
#include "LineComponent.h"

using namespace DirectX::SimpleMath;


void MeshComponent::CreateMesh(std::string meshPath) {
	auto* render = game()->render()->device();

	m_mesh = game()->meshAsset()->GetMesh(meshPath);
	m_materials = game()->meshAsset()->GetMaterials(meshPath);
}

/// TODO: убрать этот ужас. Не нужно позволять вызывать два CreateMesh.
void MeshComponent::CreateMesh(
	std::vector<Mesh4::Vertex>* verteces,
	std::vector<int>* indeces,
	fs::path shaderPath)
{
	m_isMeshHolder = true;

	auto mesh = new Mesh4();
	mesh->AddShape(verteces, indeces, game()->render(), 0);
	m_mesh = mesh;

	auto* shaderAsset = game()->shaderAsset();
	auto& mat = m_selfMaterials.emplace_back();
	mat.name = "Generated by MeshComponent";
	mat.shader = shaderAsset->GetShader(shaderAsset->GetShaderHash(shaderPath));

	const auto* image = game()->imageAsset()->Get(ImageAsset::RUNTIME_IMG_2X2_RGBA_1111);
	game()->render()->CreateTexture(image, mat.diffuse, false, false);

	m_materials = &m_selfConstMaterials;
	m_selfConstMaterials.reserve(m_selfMaterials.size());
	for (auto& m : m_selfMaterials)
		m_selfConstMaterials.push_back(&m);
}

void MeshComponent::ShowNormals(std::vector<Mesh4::Vertex>* verteces) {
	for (auto& vertex : *verteces) {
		auto line = AddComponent<LineComponent>();
		line->SetPoints((Vector3)vertex.position, (Vector3)vertex.position + (Vector3)vertex.normal * 10, {1,0,0,1});
	}
}

void MeshComponent::OnDestroy() {
	if (m_isMeshHolder && m_mesh != nullptr)
		delete m_mesh;
}

void MeshComponent::OnDraw() {
	if (!isDebug)
		m_Draw();
}

void MeshComponent::OnDrawDebug() {
	if (isDebug)
		m_Draw();
}

void MeshComponent::m_Draw() {
	if (!m_visible)
		return;

	auto camera = game()->render()->camera();
	auto cameraPosition = camera->transform.worldPosition();
	auto worldMatrix = transform.GetWorldMatrix(); // *Matrix::CreateScale(100, 100, 100);
	auto transMatrix = worldMatrix * camera->cameraMatrix();

	Mesh4::DynamicData data;
	data.render = game()->render();
	data.materials = m_materials;
	data.worldMatrix = &worldMatrix;
	data.transfMatrix = &transMatrix;
	data.directionLight = game()->lighting()->directionLight();
	data.cameraPosition = &cameraPosition;

	m_mesh->Draw(data);
}
