using System;
using System.Collections.Generic;

using Engine;

#if BADCODE

public class Attachable : CSComponent {
    private static DynamicMaterial s_meshMaterial;
    private static DynamicMaterial s_boundMaterial;
    private static ulong s_attachableCount;

	public Player player = null;

    public float boundRadius = 30;
    public bool attachParent = false;

    public bool showCenter = true;
    public bool showBound = true;

    public Vector3 boundCenter;

    private MeshComponent m_mesh;
    private MeshComponent m_bound;

    private bool m_canAttach = false;


    public override void OnInit() {
        m_mesh = actor.AddComponent<MeshComponent>();
        m_bound = actor.AddComponent<MeshComponent>();

        if (s_attachableCount == 0) {
            s_meshMaterial = new DynamicMaterial("Generated by Attachaable", Assets.ShaderDiffuseColor);
            s_boundMaterial = new DynamicMaterial("Generated by Attachaable", Assets.ShaderDiffuseColor);

            s_meshMaterial.DiffuseColor = new Vector3(0.8f, 0.2f, 0.4f);
            s_boundMaterial.DiffuseColor = new Vector3(0.0f, 0.6f, 0.0f);
        }

        s_attachableCount++;
    }

    public override void OnDestroy() {
        m_mesh.RemoveMaterials();
        m_bound.RemoveMaterials();

        s_attachableCount--;

        if (s_attachableCount == 0) {
            s_meshMaterial.Delete();
            s_boundMaterial.Delete();
        }
    }

    public override void OnStart() {
        float boxSize = boundRadius * 2 * 0.5f;

        m_mesh.mesh = new StaticMesh(MeshAsset.formBox);
        m_mesh.SetMaterial(0, s_meshMaterial);
        m_mesh.meshScale = new Vector3(boundRadius, boundRadius, boundRadius);

        m_bound.mesh = new StaticMesh(MeshAsset::formSphereLined);
        m_bound.SetMaterial(0, s_boundMaterial);
        m_bound.meshScale = new Vector3(boundRadius * 2, boundRadius * 2, boundRadius * 2);

        m_mesh.IsVisible = showCenter;
        m_bound.IsVisible = showBound;
    }

    public override void OnUpdate() {
        if (Input.GetButtonDown(Key.Y)) {
            m_mesh.IsVisible = true;
            m_bound.IsVisible = true;
        }

        if (Input.GetButtonDown(Key.U)) {
            m_mesh.IsVisible = false;
            m_bound.IsVisible = false;
        }

        if (player != null && player.IsDestroyed)
            player = null;

        if (player == null)
            return;

        if (!m_canAttach) {
            if ((boundRadius / player.radius) <= 0.8f) {
                m_canAttach = true;
                m_bound.IsVisible = true && showBound;
            }
        }

        if (!m_canAttach)
            return;

        var playerPos = player.worldPosition;
        var dist = (actor.worldPosition + boundCenter - playerPos).Length();

        if (dist <= boundRadius + player.radius) {

            if (actor.HasParent && attachParent)
                player.Attach(actor.parent);
            else
                player.Attach(actor);

            player = null;
        }
    }
};

#endif