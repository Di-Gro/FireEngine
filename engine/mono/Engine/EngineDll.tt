<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ include file="EndineDllHelper.tt" #>
<#@ output extension=".cs" #>
// AUTOGENERATED FILE: Do not edit directly, instead edit EngineDll.tt

using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

using Engine;

using size_t = System.UInt64;

namespace EngineDll {

	public class Dll {


		public static class CameraComponent {

<#
			DEC_COMPONENT("CameraComponent");
			PROP_GET("CameraComponent", "bool", "IsAttached");
			PROP_GETSET("CameraComponent", "bool", "orthographic");

			FUNC("CameraComponent", "Attach", "void", "CppRef compRef");
			FUNC("CameraComponent", "UpdateProjMatrix", "void", "CppRef compRef");
#>
		}

		public static class Actor {
		
<#
			FUNC("Actor", "BindComponent", "void" , "CppRef objRef, CppRef compRef");
			FUNC("Actor", "InitComponent", "void" , "CppRef objRef, CppRef compRef");

			FUNC("Actor", "gameObject_get", "CsRef", "CppRef objBaseRef");

			FUNC("Actor", "parent_get", "CsRef", "CppRef objRef");
			FUNC("Actor", "parent_set", "void", "CppRef objRef, CppRef newObjRef");

			FUNC("Actor", "DestroyComponent", "void", "CppRef compRef");
			FUNC("Actor", "Destroy", "void", "CppRef objRef");

			FUNC("Actor", "GetComponentsCount", "int", "CppRef objRef");
			FUNC("Actor", "WriteComponentsRefs", "void", "CppRef objRef, size_t listPtr");

			FUNC("Actor", "GetChildrenCount", "int", "CppRef objRef");
			FUNC("Actor", "GetChild", "CsRef", "CppRef objRef, int index");

			PROP_GETSET("Actor", "Vector3", "localPosition");
			PROP_GETSET("Actor", "Vector3", "localRotation");
			PROP_GETSET("Actor", "Quaternion", "localRotationQ");
			PROP_GETSET("Actor", "Vector3", "localScale");

			PROP_GETSET("Actor", "Vector3", "worldPosition");
			PROP_GETSET("Actor", "Quaternion", "worldRotationQ");
			PROP_GETSET("Actor", "Vector3", "worldScale");

			PROP_GET("Actor", "Vector3", "localForward");
			PROP_GET("Actor", "Vector3", "localUp");
			PROP_GET("Actor", "Vector3", "localRight");

			PROP_GET("Actor", "Vector3", "forward");
			PROP_GET("Actor", "Vector3", "up");
			PROP_GET("Actor", "Vector3", "right");
#>

		}

		public static class Game {
		
<# 
			FUNC("Game", "SetGameCallbacks", "void", "CppRef gameRef, GameCallbacks callbacks");
			ANSI_FUNC("Game", "CreateGameObjectFromCS", "GameObjectInfo" , "CppRef sceneRef, CsRef csRef, CppRef parentRef");
			FUNC("Game", "GetRootActorsCount", "int", "CppRef sceneRef");
			FUNC("Game", "WriteRootActorsRefs", "void", "CppRef sceneRef, CsRef[] refs");
#>

		}

		public static class CsComponent {

<# 
			//FUNC("CsComponent", "Create", "CppObjectInfo" , "CppRef cppObjRef, CsRef csCompRef");
			FUNC("CsComponent", "Create", "CppObjectInfo" , "CsRef csCompRef");
#>

		}

		public static class Input {
		
<# 
			FUNC("HotKeys", "GetButtonDown",		"bool",		"CppRef objRef, int keyCode");
			FUNC("HotKeys", "GetButtonUp",			"bool",		"CppRef objRef, int keyCode");
			FUNC("HotKeys", "GetButton",			"bool",		"CppRef objRef, int keyCode");

			FUNC("HotKeys", "RegisterHotkey",		"void",		"CppRef objRef, int keyCode");
			FUNC("HotKeys", "UnregisterHotkey",		"void",		"CppRef objRef, int keyCode");

			FUNC("HotKeys", "MousePosition",		"Vector2", "CppRef objRef");

			PROP_GET("HotKeys", "int", "wheelDelta");
#>
		}

		public static class Material {

<#
			PUSH_ASSET("Material");

			PROP_GETSET("Material", "Vector3", "diffuseColor");
			PROP_GETSET("Material", "float", "diffuse");
			PROP_GETSET("Material", "float", "ambient");
			PROP_GETSET("Material", "float", "specular");
			PROP_GETSET("Material", "float", "shininess");

			PROP_GETSET("Material", "int", "cullMode");
			PROP_GETSET("Material", "int", "fillMode");
			PROP_GETSET("Material", "size_t", "priority");

			ANSI_FUNC("Material", "name_set", "void", "CppRef matRef, string name");
			FUNC("Material", "name_length", "size_t", "CppRef matRef");
			FUNC("Material", "name_get", "void", "CppRef matRef, byte[] buf");

			ANSI_FUNC("Material", "shader_set", "void", "CppRef gameRef, CppRef matRef, string name");
			FUNC("Material", "shader_length", "size_t", "CppRef matRef");
			FUNC("Material", "shader_get", "void", "CppRef matRef, byte[] buf");

			FUNC("Material", "isDynamic_get",		"bool",		"CppRef matRef");

			FUNC("Material", "Init", "void", "CppRef gameRef, CppRef matRef");
			FUNC("Material", "textures_set", "void", "CppRef matRef, size_t[] cppRefs, int count");
#>
		}

		public static class Assets {
		
<#
			//ANSI_FUNC("Assets", "GetHash", "ulong", "CppRef gameRef, string path");
			FUNC("Assets", "Reload", "void", "CppRef gameRef, int assetIdHash");
			FUNC("Assets", "Get", "CppRef", "CppRef gameRef, int assetIdHash");
#>
		}

		public static class Image {
		
<#
			PUSH_ASSET("Image");
			ANSI_FUNC("Image", "Init", "void", "CppRef gameRef, CppRef imgRef, string path, ref int width, ref int height");
#>
		}

		public static class Texture {
		
<#
			PUSH_ASSET("Texture");
			FUNC("Texture", "Init", "void", "CppRef gameRef, CppRef texRef, uint width, uint height");
			FUNC("Texture", "InitFromImage", "void", "CppRef gameRef, CppRef texRef, CppRef imageRef");
#>
		}

		public static class MeshAsset {

<#
			//ANSI_FUNC("MeshAsset", "CreateHash",	"size_t", 	"CppRef meshAssetRef, string fileName");

			//FUNC("MeshAsset", "Load",		"void", 	"CppRef meshAssetRef, int assetHash");
			//FUNC("MeshAsset", "GetMesh",	"CppRef", 	"CppRef meshAssetRef, int assetHash");

			FUNC("MeshAsset", "CreateDynamicMaterial",	"CppRef",	"CppRef meshAssetRef, CppRef otherMaterialRef");
			FUNC("MeshAsset", "DeleteDynamicMaterial",	"void",		"CppRef meshAssetRef, CppRef otherMaterialRef");
#>
		}

		public static class Mesh4 {
		
<#
			PUSH_ASSET("Mesh4");
			ANSI_FUNC("Mesh4", "Init", "void", "CppRef gameRef, CppRef meshRef, string path");

			FUNC("Mesh4", "ShapeCount",			"int", "CppRef mesh4Ref");
			FUNC("Mesh4", "MaterialMaxIndex",	"int", "CppRef mesh4Ref");
			FUNC("Mesh4", "materials_set", "void", "CppRef meshRef, size_t[] cppRefs, int count");
#>
		}

		public static class MeshComponent {

<#
			DEC_COMPONENT("MeshComponent");

			PROP_GET("MeshComponent", "bool", "IsDynamic");
			PROP_GET("MeshComponent", "bool", "IsStatic");
			PROP_GET("MeshComponent", "int", "MaterialCount");

			FUNC("MeshComponent",	"SetFromCs", "void", "CppRef compRef, CppRef meshRef");

			CDECL_FUNC("MeshComponent", "AddShape", "void", "CppRef compRef, Vertex[] verteces, int vength, int[] indeces, int ilength, int matIndex");

			FUNC("MeshComponent", "RemoveMaterials",	"void",		"CppRef compRef");
			FUNC("MeshComponent", "RemoveMaterial",		"void",		"CppRef compRef, int index");
			FUNC("MeshComponent", "ClearMesh",			"void",		"CppRef compRef");

			FUNC("MeshComponent", "SetMaterial",		"void",		"CppRef compRef, size_t index, CppRef materialRef");
			FUNC("MeshComponent", "GetMaterial",		"CppRef",	"CppRef compRef, size_t index");

			FUNC("MeshComponent", "SetPreInitMesh", "void", "CppRef compRef, CppRef meshRef");
			FUNC("MeshComponent", "SetPreInitMaterials", "void", "CppRef compRef, size_t[] matRefs, int count");

#>
		}
	}
}