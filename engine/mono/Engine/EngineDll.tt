<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ include file="EndineDllHelper.tt" #>
<#@ output extension=".cs" #>
// AUTOGENERATED FILE: Do not edit directly, instead edit EngineDll.tt

using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

using Engine;

using size_t = System.UInt64;

namespace EngineDll {

	public class Dll {


		public static class CameraComponent {

<#
			DEC_COMPONENT("CameraComponent");
			PROP_GET("CameraComponent", "bool", "IsAttached");
			PROP_GETSET("CameraComponent", "bool", "orthographic");
			PROP_GETSET("CameraComponent", "Matrix4x4", "viewMatrix");

			FUNC("CameraComponent", "Attach", "void", "CppRef compRef");
			FUNC("CameraComponent", "UpdateProjMatrix", "void", "CppRef compRef");
#>
		}

		public static class Actor {
		
<#
			FUNC("Actor", "BindComponent", "void" , "CppRef objRef, CppRef compRef");
			FUNC("Actor", "InitComponent", "void" , "CppRef objRef, CppRef compRef");

			FUNC("Actor", "gameObject_get", "CsRef", "CppRef objBaseRef");

			FUNC("Actor", "parent_get", "CsRef", "CppRef objRef");
			FUNC("Actor", "parent_set", "void", "CppRef objRef, CppRef newObjRef");

			FUNC("Actor", "DestroyComponent", "void", "CppRef compRef");
			FUNC("Actor", "Destroy", "void", "CppRef objRef");

			FUNC("Actor", "GetComponentsCount", "int", "CppRef objRef");
			FUNC("Actor", "WriteComponentsRefs", "void", "CppRef objRef, size_t listPtr");

			FUNC("Actor", "GetChildrenCount", "int", "CppRef objRef");
			FUNC("Actor", "GetChild", "CsRef", "CppRef objRef, int index");

			PROP_GETSET("Actor", "size_t", "flags");

			PROP_GET("Actor", "bool", "isActive");
			PROP_GETSET("Actor", "bool", "activeSelf");

			PROP_GETSET("Actor", "Vector3", "localPosition");
			PROP_GETSET("Actor", "Vector3", "localRotation");
			PROP_GETSET("Actor", "Quaternion", "localRotationQ");
			PROP_GETSET("Actor", "Vector3", "localScale");

			PROP_GETSET("Actor", "Vector3", "worldPosition");
			PROP_GETSET("Actor", "Quaternion", "worldRotationQ");
			PROP_GETSET("Actor", "Vector3", "worldScale");

			PROP_GET("Actor", "Vector3", "localForward");
			PROP_GET("Actor", "Vector3", "localUp");
			PROP_GET("Actor", "Vector3", "localRight");

			PROP_GET("Actor", "Vector3", "forward");
			PROP_GET("Actor", "Vector3", "up");
			PROP_GET("Actor", "Vector3", "right");

			PROP_GETSET_STR("Actor", "name");
			PROP_GETSET_STR("Actor", "prefabId");

			FUNC("Actor", "scene_get", "CppRef", "CppRef objRef");

#>

		}

		public static class Game {
		
<# 
			FUNC("Game", "SetGameCallbacks", "void", "CppRef gameRef, GameCallbacks callbacks");
			ANSI_FUNC("Game", "CreateGameObjectFromCS", "GameObjectInfo" , "CppRef sceneRef, CsRef csRef, CppRef parentRef");
			FUNC("Game", "GetRootActorsCount", "int", "CppRef sceneRef");
			FUNC("Game", "WriteRootActorsRefs", "void", "CppRef sceneRef, CsRef[] refs");
			FUNC("Game", "mainCamera_get", "CsRef", "CppRef gameRef");
			FUNC("Game", "Exit", "void", "CppRef gameRef");

			FUNC("Game", "PushScene", "void", "CppRef gameRef, CppRef sceneRef");
			FUNC("Game", "PopScene", "void", "CppRef gameRef");

			FUNC("Game", "CreateScene", "CppRef", "CppRef gameRef, bool isEditor");
			FUNC("Game", "DestroyScene", "void", "CppRef gameRef, CppRef sceneRef");

			ANSI_FUNC("Game", "SetEditorSettings", "void", "CppRef gameRef, string startupScene");
#>

		}

		public static class CsComponent {

<# 
			//FUNC("CsComponent", "Create", "CppObjectInfo" , "CppRef cppObjRef, CsRef csCompRef");
			FUNC("CsComponent", "Create", "CppObjectInfo" , "CsRef csCompRef");
			PROP_GETSET("Component", "bool", "runtimeOnly");
			PROP_GETSET("Component", "bool", "f_isCrashed");
			PROP_GET("Component", "bool", "IsActivated");
#>

		}

		public static class Input {
		
<# 
			FUNC("HotKeys", "GetButtonDown",		"bool",		"CppRef objRef, int keyCode");
			FUNC("HotKeys", "GetButtonUp",			"bool",		"CppRef objRef, int keyCode");
			FUNC("HotKeys", "GetButton",			"bool",		"CppRef objRef, int keyCode");

			FUNC("HotKeys", "RegisterHotkey",		"void",		"CppRef objRef, int keyCode");
			FUNC("HotKeys", "UnregisterHotkey",		"void",		"CppRef objRef, int keyCode");

			FUNC("HotKeys", "MousePosition",		"Vector2", "CppRef objRef");

			PROP_GET("HotKeys", "int", "wheelDelta");
			PROP_GET("HotKeys", "Vector2", "mouseDelta");
#>
		}

		public static class Material {

<#
			PUSH_ASSET("Material");

			PROP_GETSET("Material", "Vector3", "diffuseColor");
			PROP_GETSET("Material", "float", "diffuse");
			PROP_GETSET("Material", "float", "ambient");
			PROP_GETSET("Material", "float", "specular");
			PROP_GETSET("Material", "float", "shininess");

			PROP_GETSET("Material", "int", "cullMode");
			PROP_GETSET("Material", "int", "fillMode");
			PROP_GETSET("Material", "size_t", "priority");

			ANSI_FUNC("Material", "name_set", "void", "CppRef matRef, string name");
			FUNC("Material", "name_length", "size_t", "CppRef matRef");
			FUNC("Material", "name_get", "void", "CppRef matRef, byte[] buf");

			ANSI_FUNC("Material", "shader_set", "void", "CppRef gameRef, CppRef matRef, string name");
			FUNC("Material", "shader_length", "size_t", "CppRef matRef");
			FUNC("Material", "shader_get", "void", "CppRef matRef, byte[] buf");

			FUNC("Material", "isDynamic_get",		"bool",		"CppRef matRef");

			FUNC("Material", "Init", "void", "CppRef gameRef, CppRef matRef");
			FUNC("Material", "textures_set", "void", "CppRef matRef, size_t[] cppRefs, int count");
#>
		}

		public static class Assets {
		
<#
			FUNC("Assets", "Reload", "void", "CppRef gameRef, int assetIdHash");
			FUNC("Assets", "Get", "CppRef", "CppRef gameRef, int assetIdHash");
			FUNC("Assets", "MakeDirty", "void", "CppRef gameRef, int assetIdHash");
			FUNC("Assets", "IsDirty", "bool", "CppRef gameRef, int assetIdHash");
#>
		}

		public static class Image {
		
<#
			PUSH_ASSET("Image");
			ANSI_FUNC("Image", "Init", "void", "CppRef gameRef, CppRef imgRef, string path, ref int width, ref int height");
#>
		}

		public static class Texture {
		
<#
			PUSH_ASSET("Texture");
			FUNC("Texture", "Init", "void", "CppRef gameRef, CppRef texRef, uint width, uint height");
			FUNC("Texture", "InitFromImage", "void", "CppRef gameRef, CppRef texRef, CppRef imageRef");
#>
		}

		public static class MeshAsset {

<#
			//ANSI_FUNC("MeshAsset", "CreateHash",	"size_t", 	"CppRef meshAssetRef, string fileName");

			//FUNC("MeshAsset", "Load",		"void", 	"CppRef meshAssetRef, int assetHash");
			//FUNC("MeshAsset", "GetMesh",	"CppRef", 	"CppRef meshAssetRef, int assetHash");

			FUNC("MeshAsset", "CreateDynamicMaterial",	"CppRef",	"CppRef meshAssetRef, CppRef otherMaterialRef");
			FUNC("MeshAsset", "DeleteDynamicMaterial",	"void",		"CppRef meshAssetRef, CppRef otherMaterialRef");
#>
		}

		public static class Mesh4 {
		
<#
			PUSH_ASSET("Mesh4");
			ANSI_FUNC("Mesh4", "Init", "void", "CppRef gameRef, CppRef meshRef, string path");

			FUNC("Mesh4", "ShapeCount",			"int", "CppRef mesh4Ref");
			FUNC("Mesh4", "MaterialMaxIndex",	"int", "CppRef mesh4Ref");
			FUNC("Mesh4", "materials_set", "void", "CppRef meshRef, size_t[] cppRefs, int count");
#>
		}

		public static class MeshComponent {

<#
			DEC_COMPONENT("MeshComponent");

			PROP_GET("MeshComponent", "bool", "IsDynamic");
			PROP_GET("MeshComponent", "bool", "IsStatic");
			PROP_GET("MeshComponent", "int", "MaterialCount");
			PROP_GETSET("MeshComponent", "bool", "castShadow");

			FUNC("MeshComponent",	"SetFromCs", "void", "CppRef compRef, CppRef meshRef");

			CDECL_FUNC("MeshComponent", "AddShape", "void", "CppRef compRef, Vertex[] verteces, int vength, int[] indeces, int ilength, int matIndex");

			FUNC("MeshComponent", "RemoveMaterials",	"void",		"CppRef compRef");
			FUNC("MeshComponent", "RemoveMaterial",		"void",		"CppRef compRef, int index");
			FUNC("MeshComponent", "ClearMesh",			"void",		"CppRef compRef");

			FUNC("MeshComponent", "SetMaterial",		"void",		"CppRef compRef, size_t index, CppRef materialRef");
			FUNC("MeshComponent", "GetMaterial",		"CppRef",	"CppRef compRef, size_t index");

			FUNC("MeshComponent", "SetPreInitMesh", "void", "CppRef compRef, CppRef meshRef");
			FUNC("MeshComponent", "SetPreInitMaterials", "void", "CppRef compRef, size_t[] matRefs, int count");

			FUNC("MeshComponent", "OnPreInit", "void", "CppRef compRef");

#>
		}

		public static class UI_Inspector {

<#
			ANSI_FUNC("UI_Inspector", "ShowText", "bool", "CppRef gameRef, string label, string buffer, int length, ref ulong ptr");
			ANSI_FUNC("UI_Inspector", "SetComponentName", "void", "CppRef gameRef, string value");
			ANSI_FUNC("UI_Inspector", "ShowAsset", "bool", "CppRef gameRef, string label, int scriptIdHash, ref int assetIdHash, bool isActive");
			ANSI_FUNC("UI_Inspector", "ShowActor", "bool", "CppRef gameRef, string label, ref CsRef csRef, CppRef cppRef");
			ANSI_FUNC("UI_Inspector", "ShowComponent", "bool", "CppRef gameRef, string label, ref CsRef csRef, CppRef cppRef, int scriptIdHash");

			ANSI_FUNC("UI_Inspector", "ShowColor3", "bool", "CppRef gameRef, string label, ref Vector3 value");
#>
		}

		public static class DirectionalLight {
		
<#
			DEC_COMPONENT("DirectionLight");
#>
		}

		public static class AmbientLight {
		
<#
			DEC_COMPONENT("AmbientLight");
#>
		}

		public static class PointLight {
		
<#
			DEC_COMPONENT("PointLight");
#>
		}

		public static class SpotLight {
		
<#
			DEC_COMPONENT("SpotLight");
#>
		}

		public static class AssetStore {
		
<#
			FUNC("AssetStore", "ClearTypes", "void", "CppRef gameRef");
			FUNC("AssetStore", "ClearComponents", "void", "CppRef gameRef");
			FUNC("AssetStore", "ClearAssets", "void", "CppRef gameRef");
			FUNC("AssetStore", "ClearAssetTypes", "void", "CppRef gameRef");

			ANSI_FUNC("AssetStore", "SetType", "void", "CppRef gameRef, int typeId, string fullName, string name");
			FUNC("AssetStore", "AddComponent", "void", "CppRef gameRef, int typeId");
			ANSI_FUNC("AssetStore", "AddAsset", "void", "CppRef gameRef, int typeId, int assetId, string name");
			FUNC("AssetStore", "AddAssetType", "void", "CppRef gameRef, int typeId");

			PROP_GETSET_STR("AssetStore", "projectPath");
			PROP_GETSET_STR("AssetStore", "assetsPath");
			PROP_GETSET_STR("AssetStore", "editorPath");

			PROP_GETSET("AssetStore", "int", "actorTypeIdHash");
			PROP_GETSET("AssetStore", "int", "prefabTypeIdHash");
			PROP_GETSET("AssetStore", "int", "componentTypeIdHash");
			PROP_GETSET("AssetStore", "int", "sceneTypeIdHash");

			PROP_GETSET_STR("AssetStore", "buffer");

			ANSI_FUNC("AssetStore", "RenameAsset", "void", "CppRef gameRef, int assetId, string name");
			FUNC("AssetStore", "RemoveAsset", "void", "CppRef gameRef, int typeId, int assetId");

#>
		}

		public static class ImGui {
		
<#
			ANSI_FUNC("ImGui", "CalcTextWidth", "float", "string value");
#>
		}

		public static class Scene {
		
<#
			PUSH_ASSET("Scene");
			PROP_GETSET_STR("Scene", "name");

			PROP_GETSET("Scene", "Vector3", "editorCameraPos");
			PROP_GETSET("Scene", "Quaternion", "editorCameraRot");
			PROP_GETSET("Scene", "float", "editorCameraSpeed");
#>
		}

		public static class BoxCollider {
		
<#
			DEC_COMPONENT("BoxCollider");
#>
		}

		public static class SphereCollider {
		
<#
			DEC_COMPONENT("SphereCollider");
#>
		}

		public static class CapsuleCollider {
		
<#
			DEC_COMPONENT("CapsuleCollider");
#>
		}

		public static class Rigidbody {
		
<#
			DEC_COMPONENT("Rigidbody");

			PROP_GETSET("Rigidbody", "bool", "simulate");
			PROP_GETSET("Rigidbody", "float", "gravity");

			PROP_GETSET("Rigidbody", "uint", "motion");
			PROP_GETSET("Rigidbody", "uint", "quality");

			FUNC("Rigidbody", "AddForce", "void", "CppRef bodyRef, Vector3 inForce");
			FUNC("Rigidbody", "AddForceInPos", "void", "CppRef bodyRef, Vector3 inForce, Vector3 inPosition");

			FUNC("Rigidbody", "GetLinearVelocity", "Vector3", "CppRef bodyRef");
			FUNC("Rigidbody", "SetLinearVelocityClamped", "void", "CppRef bodyRef, Vector3 inLinearVelocity");

			FUNC("Rigidbody", "AddImpulse", "void", "CppRef bodyRef, Vector3 inImpulse");
			FUNC("Rigidbody", "AddImpulseInPos", "void", "CppRef bodyRef, Vector3 inImpulse, Vector3 inPosition");

			FUNC("Rigidbody", "GetFriction", "float", "CppRef bodyRef");
			FUNC("Rigidbody", "SetFriction", "void", "CppRef bodyRef, float inFriction");
#>
		}

		public static class Character {
		
<#
			DEC_COMPONENT("FireCharacter");

			PROP_GETSET("FireCharacter", "bool", "simulate");
			PROP_GETSET("FireCharacter", "float", "gravity");

			FUNC("FireCharacter", "GetLinearVelocity", "Vector3", "CppRef bodyRef");
			FUNC("FireCharacter", "SetLinearVelocityClamped", "void", "CppRef bodyRef, Vector3 inLinearVelocity");

			FUNC("FireCharacter", "AddImpulse", "void", "CppRef bodyRef, Vector3 inImpulse");

			FUNC("FireCharacter", "GetFriction", "float", "CppRef bodyRef");
			FUNC("FireCharacter", "SetFriction", "void", "CppRef bodyRef, float inFriction");

			FUNC("FireCharacter", "HandleInput", "void", "CppRef bodyRef, Vector3 movementDirection, bool jump, bool run, float deltaTime");
#>
		}

		public static class AIComponent {
<#
			DEC_COMPONENT("AIComponent");
			ANSI_FUNC("AIComponent", "AddWME", "int", "CppRef compRef, string id, string attr, string value");
			FUNC("AIComponent", "UpdateRete", "void","CppRef compRef");
			ANSI_FUNC("AIComponent", "SetWMEValue", "void", "CppRef compRef, int index, string value");
			ANSI_FUNC("AIComponent", "AddCondition", "void", "CppRef compRef, int decisionHash, int type1, string value1, int type2, string value2, int type3, string value3");
			FUNC("AIComponent", "Decide", "bool", "CppRef compRef, int decisionHash");
			FUNC("AIComponent", "GetText", "size_t", "CppRef compRef, int decisionHash");
#>			
		}

		public static class NavMesh {
<#
			FUNC("NavMesh", "GethPath", "void", "CppRef gameRef, ref size_t pointsPtr, ref int count, int pathSlot");
			FUNC("NavMesh", "FindPath", "int", "CppRef gameRef, Vector3 pStartPos, Vector3 pEndPos, int nPathSlot, int nTarget");
			FUNC("NavMesh", "RandomPoint", "Vector3", "CppRef gameRef");
			FUNC("NavMesh", "NavMeshBuild", "bool", "CppRef gameRef");
#>			
		}

		
	}
}