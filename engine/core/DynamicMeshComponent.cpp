//#include "DynamicMeshComponent.h"
//
//#include <SimpleMath.h>
//
//#include "Game.h"
//#include "CameraComponent.h"
//#include "LineComponent.h"
//
//using namespace DirectX::SimpleMath;
//
//
//void DynamicMeshComponent::OnInit() {
//	m_mesh = new Mesh4();
//}
//
//void DynamicMeshComponent::OnDestroy() {
//	m_DeleteResources();
//}
//
//void DynamicMeshComponent::ClearMesh() {
//	m_DeleteResources();
//	m_mesh = new Mesh4();
//}
//
//void DynamicMeshComponent::m_DeleteResources() {
//	delete m_mesh;
//
//	for (int i = 0; i < m_replacedMaterials.size(); i++) {
//		if (m_replacedMaterials[i] != nullptr)
//			delete m_replacedMaterials[i];
//	}
//	m_materials.clear();
//	m_replacedMaterials.clear();
//}
//
//void DynamicMeshComponent::AddShape(std::vector<Mesh4::Vertex>* verteces, std::vector<int>* indeces, size_t materialIndex) {
//
//	m_mesh->AddShape(verteces, indeces, game()->render(), materialIndex);
//
//	m_FillByDefaultMaterial(m_mesh->maxMaterialIndex() + 1);
//}
//
//void DynamicMeshComponent::SetMaterial(size_t index, const fs::path& shaderPath) {
//	if (index > m_mesh->maxMaterialIndex())
//		return;
//
//	m_FillByDefaultMaterial(index + 1);
//	
//	// Удаляем старый материал
//	auto lastReplaced = m_replacedMaterials[index];
//	if (lastReplaced != nullptr)
//		delete lastReplaced;
//
//	// Создаем навый материал
//	auto material = game()->meshAsset()->CreateMaterial("Generated by DynamicMeshComponent", shaderPath);
//
//	// Запоминаем навый материал
//	m_materials[index] = material;
//	m_replacedMaterials[index] = material;
//}
//
//void DynamicMeshComponent::m_FillByDefaultMaterial(int targetSize) {
//	if (m_materials.size() < targetSize) {
//
//		// Берем стандартный материал
//		auto defaultMaterial = game()->meshAsset()->GetStaticMaterial(MeshAsset::defaultMaterialName);
//
//		// Заполняем стандартными материалами.
//		for (int i = m_materials.size(); i < targetSize; i++) {
//			m_materials.push_back(defaultMaterial);
//			m_replacedMaterials.push_back(nullptr);
//		}
//	}
//}
//
//void DynamicMeshComponent::RemoveMaterial(int index) {
//	if (index > m_mesh->maxMaterialIndex())
//		return;
//
//	// Удаляем старый материал
//	auto lastReplaced = m_replacedMaterials[index];
//	if (lastReplaced != nullptr) {
//		delete lastReplaced;
//
//		// Ставим стандартный материал
//		auto defaultMaterial = game()->meshAsset()->GetStaticMaterial(MeshAsset::defaultMaterialName);
//		m_materials[index] = defaultMaterial;
//	}
//}
//
//void DynamicMeshComponent::OnDraw() {
//	if (!isDebug)
//		m_Draw();
//}
//
//void DynamicMeshComponent::OnDrawDebug() {
//	if (isDebug)
//		m_Draw();
//}
//
//void DynamicMeshComponent::m_Draw() {
//	if (!visible)
//		return;
//
//	auto camera = game()->render()->camera();
//	auto cameraPosition = camera->transform->worldPosition();
//	auto worldMatrix = transform->GetWorldMatrix(); // *Matrix::CreateScale(100, 100, 100);
//	auto transMatrix = worldMatrix * camera->cameraMatrix();
//
//	Mesh4::DynamicData data;
//	data.render = game()->render();
//	data.materials = &m_materials;
//	data.worldMatrix = &worldMatrix;
//	data.transfMatrix = &transMatrix;
//	data.directionLight = game()->lighting()->directionLight();
//	data.cameraPosition = &cameraPosition;
//
//	m_mesh->Draw(data);
//}
